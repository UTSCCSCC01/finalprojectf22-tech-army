const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator');
const User = require("../models/User");
const jsonwebtoken = require('jsonwebtoken');
const constants = require('../config/constants.json');
const bcrypt = require('bcryptjs');
const auth = require('../middleware/auth');


//http://localhost:8000/api/users
// @route   PUT api/users/getUsers
// @desc    Get an array of users from an array of userIds
// @access  Private
router.get('/getUsers', auth, async (req, res) => {
    try {
        const userIds = req.query.userIds;
        if (!userIds) {
            return res.status(400).json({ message: 'Please include a property of userIds in the params' });
        }
        const userObjects = await User.find({ '_id': { $in: userIds } });
        // DO WE WANT TO SEND THIS ERROR? i think its fine if a user deletes there account and you cant find it anymore
        // if(userIds.length != userObjects.length){
        //     return res.status(404).json({ message: 'Cannot find one or more of the users' });
        // }
        res.status(200).json(userObjects);
    } catch (err) {
        console.log(err);  
        res.status(500).send('Server Error');
    }
});

// @route   GET api/users
// @desc    Get all users
// @access  Private
router.get("/", auth, (req, res) => {

    User.find()
    .exec( (err, users) => {
        if (err) return res.status(400).json({success:false,err})

        res.status(200).json({success:true , users})
    } )

});

/*
    ROUTE: POST api/users
    DESC: Register a user
    ACCESS: Public
*/
router.post('/', [
    check('name', 'Please enter your name').notEmpty(),
    check('email', 'Please enter a valid email').isEmail(),
    check('email', 'Please use a UofT email').custom(value => {
        return value.includes("@mail.utoronto.ca");
    }),
    check('password', 'Please enter a password with 5 or more characters').isLength({min: 5})
], async (request, response) => { 
    const errorMessages = validationResult(request);
    if(!errorMessages.isEmpty()) return response.status(400).json({errors: errorMessages.array()});
    const {name, email, password} = request.body;
    try{
        let user = await User.findOne({email: email});
        if(user) return response.status(400).json({message: 'Email is already registered'});
        user = new User({
            name,
            email,
            password
        });
        const salt = await bcrypt.genSalt(); //encrypt the password
        user.password = await bcrypt.hash(password, salt);
        await user.save();
        jsonwebtoken.sign(
            {user: { id: user.id}}, //user id is auto generated by mongoose
            constants.jsonwebtokenSecret, {
            expiresIn: 7200 //2 hours
        }, (error, token) => {
            if(error) throw error;
            response.json({token});
        });
    }catch(error){
        console.log(error.message);
        response.sendStatus(500); //server error
    }
}); 

/*
    ROUTE: PUT api/users
    DESC: Update user info (username, password)
    ACCESS: Private
*/
router.put('/', auth, async (request, response) =>{
    const errorMessages = validationResult(request);
    if(!errorMessages.isEmpty()) return response.status(400).json({errors: errorMessages.array()});
    try {
        const {name, password, profilePictureURL, coverImg} = request.body;
        const salt = await bcrypt.genSalt();
        let newPass;
        if(password) newPass = await bcrypt.hash(password, salt);
        const update = {name: name, password: newPass, profilePictureURL: profilePictureURL, coverImg: coverImg};
        Object.keys(update).forEach(key => update[key] === undefined ? delete update[key] : {});
        await User.findByIdAndUpdate(request.user.id, update);
        response.json({message: "Updated user info"});
    } catch(error) {
        console.log(error.message);
        response.json({message: error.message});
    }
});

/*
    ROUTE: DELETE api/users
    DESC: Delete a user
    ACCESS: Private
*/
router.delete('/', auth, async (request, response) =>{
    try {
        await User.findByIdAndDelete(request.user.id);
        response.json({message: "User deleted"});
    } catch(error) {
        console.log(error.message);
        response.json({message: error.message});
    }
});



module.exports = router;
